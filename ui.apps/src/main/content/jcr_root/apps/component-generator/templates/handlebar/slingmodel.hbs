/*
 * Copyright Sumanta Pakira
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */
package {{packagename}};

import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ValueMap;
import org.apache.sling.models.annotations.Default;
import org.apache.sling.models.annotations.Exporter;
import org.apache.sling.models.annotations.Model;
import org.apache.sling.models.annotations.injectorspecific.InjectionStrategy;
import org.apache.sling.models.annotations.injectorspecific.ValueMapValue;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
{{#if isMultiFieldMap}}
import com.aem.component.generator.core.commons.MultiFieldMap;
{{/if}}
import com.adobe.cq.export.json.ComponentExporter;
import com.adobe.cq.export.json.ExporterConstants;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.List;
import javax.annotation.PostConstruct;
import lombok.Getter;
import javax.inject.Inject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


@Model(adaptables = Resource.class, adapters = { {{interfaceName}}.class, ComponentExporter.class }, resourceType = {"{{resourceType}}"})
@Exporter(name = ExporterConstants.SLING_MODEL_EXPORTER_NAME, extensions = ExporterConstants.SLING_MODEL_EXTENSION)
public class {{className}} implements {{interfaceName}} {

    private static final Logger LOG = LoggerFactory.getLogger({{className}}.class);

    @Inject
    private Resource resource;

    {{#propertyLists}}
    @ValueMapValue(injectionStrategy = InjectionStrategy.OPTIONAL)
    @Nullable
    @Getter
    private String {{.}};
   {{/propertyLists}}

   
    @PostConstruct
    private void initModel() {
        // If appicable your logic goes here...
    }

    @NotNull
    @Override
    public String getExportedType() {
        return resource.getResourceType();
    }

    {{#if isMultiFieldMap}}
     {{#multiValueLists}}
    private Map<String, String> _{{.}}PropMap = new HashMap<String, String>();

    public Map<String, String> getMultiField{{.}}() {
    final MultiFieldMap {{.}}Map = new MultiFieldMap(resource, "{{.}}");
    final Resource {{.}}Resource = resource.getChild("{{.}}");

    final Iterator<Resource> resourceIterator = {{.}}Resource.listChildren();
    
    while (resourceIterator.hasNext()) {
                    final ValueMap valueMap = resourceIterator.next().getValueMap();
                    for(int i=0 ;i<{{.}}Map.getCountOfMultifieldProperties(); i++){
                        _{{.}}PropMap.put({{.}}Map.getChildElement().get(i),valueMap.get({{.}}Map.getChildElement().get(i), String.class));
                    }
                    
                }

        return  _{{.}}PropMap;       
     }
     {{/multiValueLists}}
    {{/if}}

}  